import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        System.out.println("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...\n");

        // –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç SINGLETON
        System.out.println("1. –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ getInstance()...");
        PayrollService dept1 = PayrollService.getInstance();

        System.out.println("2. –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ getInstance()...");
        PayrollService dept2 = PayrollService.getInstance();

        System.out.println("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º: –æ–¥–∏–Ω –ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç?");
        if (dept1 == dept2) {
            System.out.println("‚úÖ –î–ê! –≠—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ—Ç–¥–µ–ª.");
        } else {
            System.out.println("‚ùå –ù–ï–¢! –≠—Ç–æ —Ä–∞–∑–Ω—ã–µ –æ—Ç–¥–µ–ª—ã. –û—à–∏–±–∫–∞!");
        }

        System.out.println("\n--- –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—ã ---\n");

        Scanner scanner = new Scanner(System.in);
        boolean running = true;
        while (running) {
            showMenu();
            int choice = getIntInput("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: ", scanner);
            switch (choice) {
                case 1 -> addWorkType();
                case 2 -> addEmployeeAndWork(scanner, dept1);
                case 3 -> getEmployeeSalary(scanner, dept1);
                case 4 -> showTotalPayroll(dept1);
                case 0 -> {
                    System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.");
                    running = false;
                }
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
        scanner.close();
    }


    private static void showMenu() {
        System.out.println("\n=== –û—Ç–¥–µ–ª –†–∞—Å—á—ë—Ç–∞ –ó–∞—Ä–ø–ª–∞—Ç—ã ===");
        System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤–∏–¥—ã —Ä–∞–±–æ—Ç");
        System.out.println("2. –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –∏ –µ–≥–æ —Ä–∞–±–æ—Ç—ã");
        System.out.println("3. –£–∑–Ω–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞");
        System.out.println("4. –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç");
        System.out.println("0. –í—ã—Ö–æ–¥");
    }

    private static void addWorkType() {
        System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç:");
        for (WorkType wt : WorkType.values()) {
            System.out.printf("- %s: %.2f —Ä—É–±/–µ–¥.\n", wt.name(), wt.getRate());
        }
    }

    private static void addEmployeeAndWork(Scanner scanner, PayrollService payroll) {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: ");
        String fullName = scanner.nextLine().trim();

        if (fullName.isEmpty()) {
            System.out.println("–û—à–∏–±–∫–∞: –∏–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        if (payroll.employeeExists(fullName)) {
            System.out.println("–û—à–∏–±–∫–∞: —Ä–∞–±–æ—Ç–Ω–∏–∫ —Å –∏–º–µ–Ω–µ–º '" + fullName + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.");
            return;
        }

        Employee emp = new Employee(fullName);

        System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç:");
        WorkType[] types = WorkType.values();
        for (int i = 0; i < types.length; i++) {
            System.out.printf("%d. %s (%.2f —Ä—É–±/–µ–¥.)\n", i + 1, types[i].name(), types[i].getRate());
        }

        boolean adding = true;
        while (adding) {
            int typeIndex = getIntInput("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã (–∏–ª–∏ 0 –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ", scanner) - 1;
            if (typeIndex == -1) break;
            if (typeIndex < 0 || typeIndex >= types.length) {
                System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≤–∏–¥–∞ —Ä–∞–±–æ—Ç—ã.");
                continue;
            }

            int quantity = getIntInput("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç: ", scanner);
            if (quantity <= 0) {
                System.out.println("–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.");
                continue;
            }

            Work work = new Work(types[typeIndex], quantity);
            emp.addWork(work);
            System.out.println("–†–∞–±–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.");

            System.out.print("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Ä–∞–±–æ—Ç—É? (y/n): ");
            String cont = scanner.nextLine().trim().toLowerCase();
            adding = cont.equals("y") || cont.equals("yes");
        }

        payroll.addEmployee(emp);
        System.out.println("–†–∞–±–æ—Ç–Ω–∏–∫ '" + fullName + "' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.");
    }

    private static void getEmployeeSalary(Scanner scanner, PayrollService payroll) {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: ");
        String fullName = scanner.nextLine().trim();
        if (fullName.isEmpty()) {
            System.out.println("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        var employeeOpt = payroll.findEmployeeByFullName(fullName);
        if (employeeOpt.isPresent()) {
            double salary = employeeOpt.get().calculateSalary();
            System.out.printf("–ó–∞—Ä–ø–ª–∞—Ç–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ '%s': %.2f —Ä—É–±.\n", fullName, salary);
        } else {
            System.out.println("–†–∞–±–æ—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
    }

    private static void showTotalPayroll(PayrollService payroll) {
        double total = payroll.getTotalPayroll();
        System.out.printf("–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç –≤—Å–µ–º —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º: %.2f —Ä—É–±.\n", total);
    }

    private static int getIntInput(String prompt, Scanner scanner) {
        while (true) {
            System.out.print(prompt);
            try {
                return Integer.parseInt(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.println("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.");
            }
        }
    }
}