import java.util.Scanner;

public class Main {
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        SalaryDepartment department = new SalaryDepartment();

        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        try {
            department.addWorkType("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", new BasePayStrategy(2500.0));
            department.addWorkType("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", new BonusPayStrategy(4000.0, 15.0));
            department.addWorkType("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞", new BonusPayStrategy(6000.0, 10.0));
            department.addWorkType("–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", new BasePayStrategy(2000.0));
            System.out.println("‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.");
        } catch (InvalidPayException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        }

        while (true) {
            showMenu();
            int choice = getIntInput();
            switch (choice) {
                case 1 -> addWorkType(department);
                case 2 -> displayWorkTypes(department);
                case 3 -> calculateAveragePay(department);
                case 0 -> {
                    System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.");
                    return;
                }
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
    }

    private static void showMenu() {
        System.out.println("\n=== –û—Ç–¥–µ–ª —Ä–∞—Å—á—ë—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã ===");
        System.out.println("1. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã");
        System.out.println("2. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∏–ø—ã —Ä–∞–±–æ—Ç");
        System.out.println("3. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é –æ–ø–ª–∞—Ç—É");
        System.out.println("0. –í—ã—Ö–æ–¥");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
    }

    private static void addWorkType(SalaryDepartment department) {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã: ");
        String name = scanner.nextLine();

        // === –°–†–ê–ó–£ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ ===
        if (name == null || name.trim().isEmpty()) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
            return; // ‚Üê —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞—è –¥–∞–ª—å—à–µ
        }
        String trimmedName = name.trim();
        if (department.isWorkExists(trimmedName)) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: –†–∞–±–æ—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '" + trimmedName + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
            return; // ‚Üê —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º
        }

        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º—è –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –Ω–∞–¥–±–∞–≤–∫—É
        System.out.print("–ï—Å—Ç—å –ª–∏ –Ω–∞–¥–±–∞–≤–∫–∞? (–¥–∞/–Ω–µ—Ç): ");
        String bonusAnswer = scanner.nextLine().trim().toLowerCase();

        try {
            if (bonusAnswer.equals("–¥–∞")) {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É: ");
                double base = getDoubleInput();
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞–¥–±–∞–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –æ—Ç 0 –¥–æ 100, –Ω–µ –≤–∫–ª—é—á–∞—è –≥—Ä–∞–Ω–∏—Ü—ã): ");
                double bonus = getDoubleInput();
                // –ò–º—è —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å
                department.addWorkTypeUnsafe(trimmedName, new BonusPayStrategy(base, bonus));
                System.out.println("‚úÖ –¢–∏–ø —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–¥–±–∞–≤–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω.");
            } else if (bonusAnswer.equals("–Ω–µ—Ç")) {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—É—é —Å—Ç–∞–≤–∫—É: ");
                double base = getDoubleInput();
                department.addWorkTypeUnsafe(trimmedName, new BasePayStrategy(base));
                System.out.println("‚úÖ –¢–∏–ø —Ä–∞–±–æ—Ç—ã –±–µ–∑ –Ω–∞–¥–±–∞–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω.");
            } else {
                System.out.println("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
            }
        } catch (InvalidPayException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private static void displayWorkTypes(SalaryDepartment department) {
        System.out.println("\n--- –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ä–∞–±–æ—Ç ---");
        department.displayAllWorkTypes();
    }

    private static void calculateAveragePay(SalaryDepartment department) {
        try {
            double avg = department.getAveragePay();
            System.out.printf("üìä –°—Ä–µ–¥–Ω—è—è –æ–ø–ª–∞—Ç–∞: %.2f —Ä—É–±.\n", avg);
        } catch (InvalidPayException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private static int getIntInput() {
        while (!scanner.hasNextInt()) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ");
            scanner.next();
        }
        int value = scanner.nextInt();
        scanner.nextLine(); // consume newline
        return value;
    }

    private static double getDoubleInput() {
        while (!scanner.hasNextDouble()) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ: ");
            scanner.next();
        }
        double value = scanner.nextDouble();
        scanner.nextLine(); // consume newline
        return value;
    }
}